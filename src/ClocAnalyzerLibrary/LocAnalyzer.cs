using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;

namespace ClocAnalyzerLibrary
{
    public static class LocAnalyzer
    {
        public static LocFolder Analyze(LocAnalyzerSettings settings)
        {
            var csvDelimiter = '|';
            var rootFolder = new LocFolder { Name = "Root", FullPath = settings.RootPath };
            ExecuteCmd(settings.ClocExePath, settings.RootPath, $@"--csv --csv-delimiter={csvDelimiter} --config=""{settings.OptionsFile}"" --by-file --quiet --ignored=""{settings.IgnoredFile}"" ""{settings.RootPath}""", out var lines);
            foreach (var line in lines[2..^1])
            {
                var parts = line.Split(csvDelimiter);
                var type = parts[0];
                var filePath = parts[1].ToLower(); //Hack: As some paths are lower and some correct in cloc, just do all lower for now

                // Customized handling
                if (filePath.EndsWith(".cs", StringComparison.InvariantCultureIgnoreCase))
                {
                    using (var reader = new StreamReader(filePath))
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            var fileLine = reader.ReadLine();
                            if (fileLine != null && fileLine.Contains("<auto-generated>"))
                            {
                                type = "C# Generated";
                                break;
                            }
                        }
                    }
                }

                var blank = parts[2];
                var comment = parts[3];
                var code = parts[4];
                var relPath = Path.GetRelativePath(settings.RootPath, filePath).ToLower();
                var fileStats = new LocStats(type, Convert.ToInt64(blank), Convert.ToInt64(comment), Convert.ToInt64(code));
                rootFolder.AddPath(relPath, fileStats);
            }

            // Now parse the ignored files
            var ignoredLines = File.ReadAllLines(settings.IgnoredFile);
            foreach (var line in ignoredLines)
            {
                var linePrepared = Regex.Replace(line.Replace("/", "\\"), Regex.Escape(settings.RootPath), "", RegexOptions.IgnoreCase);
                var parts = linePrepared.Split(',', 2);
                var file = parts[0].Trim('\\', '/').ToLower(); //Hack: As some paths are lower and some correct in cloc, just do all lower for now
                var reason = parts[1];
                if (Directory.Exists(Path.Combine(settings.RootPath, file)))
                {
                    // Skip directories
                    continue;
                }
                var fileStats = new LocStats(reason);
                rootFolder.AddPath(file, fileStats);
            }

            return rootFolder;
        }

        public static int? ExecuteCmd(string cmd, string workingDirectory, string arguments, out string[] outputLines)
        {
            var processInfo = new ProcessStartInfo
            {
                FileName = cmd,
                WorkingDirectory = workingDirectory,
                Arguments = arguments,
                CreateNoWindow = true,
                UseShellExecute = false,
                RedirectStandardOutput = true
            };
            var process = Process.Start(processInfo);
            var outputLinesTmp = new List<string>();
            while (!process.StandardOutput.EndOfStream)
            {
                var line = process.StandardOutput.ReadLine();
                outputLinesTmp.Add(line);
            }
            process?.WaitForExit();
            outputLines = outputLinesTmp.ToArray();
            return process?.ExitCode;
        }
    }
}
